buildscript {
    ext.kotlin_version = '1.4.21'
    ext.navigationSageArgs = '1.0.0'
    repositories {
        google()
        jcenter()
        maven {
            url 'https://maven.google.com/'
            name 'Google'
        }
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:4.1.2'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.jetbrains.kotlin:kotlin-allopen:$kotlin_version"
        classpath 'com.google.gms:google-services:4.3.5'
        classpath 'com.google.dagger:hilt-android-gradle-plugin:2.28-alpha'
    }

    def globalConfiguration = rootProject.ext
    def versionPropsFile = file('version.properties')
    if (versionPropsFile.canRead()) {
        Properties versionProps = new Properties()
        versionProps.load(new FileInputStream(versionPropsFile))

        def versionMajor = versionProps['VERSION_MAJOR'].toInteger()
        def versionMinor = versionProps['VERSION_MINOR'].toInteger()
        def versionPatch = versionProps['VERSION_PATCH'].toInteger()
        def versionCode = versionProps['VERSION_CODE'].toInteger()

        globalConfiguration.versionMajor = versionMajor
        globalConfiguration.versionMinor = versionMinor
        globalConfiguration.versionPatch = versionPatch
        globalConfiguration.versionCode = versionCode

        versionProps['VERSION_MAJOR'] = versionMajor.toString()
        versionProps['VERSION_MINOR'] = versionMinor.toString()
        versionProps['VERSION_PATCH'] = versionPatch.toString()
        versionProps['VERSION_CODE'] = versionCode.toString()

        versionProps.store(versionPropsFile.newWriter(), null)
    }

    task("getApplicationName") {
        doLast {
            println "NFC_RUN_TRACKER_${globalConfiguration.versionCode}"
        }
    }

    task("increaseMajorVersion") {
        doLast {
            if (versionPropsFile.canRead()) {
                Properties versionProps = new Properties()
                versionProps.load(new FileInputStream(versionPropsFile))

                def versionMajor = versionProps['VERSION_MAJOR'].toInteger() + 1
                def versionCode = versionProps['VERSION_CODE'].toInteger() + 1

                versionProps['VERSION_MAJOR'] = versionMajor.toString()
                versionProps['VERSION_MINOR'] = 0.toString()
                versionProps['VERSION_PATCH'] = 0.toString()
                versionProps['VERSION_CODE'] = versionCode.toString()

                versionProps.store(versionPropsFile.newWriter(), null)
            }
        }
    }

    task("increaseMinorVersion") {
        doLast {
            if (versionPropsFile.canRead()) {
                Properties versionProps = new Properties()
                versionProps.load(new FileInputStream(versionPropsFile))
                def versionMinor = versionProps['VERSION_MINOR'].toInteger() + 1
                def versionCode = versionProps['VERSION_CODE'].toInteger() + 1
                versionProps['VERSION_MINOR'] = versionMinor.toString()
                versionProps['VERSION_PATCH'] = 0.toString()
                versionProps['VERSION_CODE'] = versionCode.toString()

                versionProps.store(versionPropsFile.newWriter(), null)
            }
        }
    }

    task("increasePatchVersion") {
        doLast {
            if (versionPropsFile.canRead()) {
                Properties versionProps = new Properties()
                versionProps.load(new FileInputStream(versionPropsFile))
                def versionPatch = versionProps['VERSION_PATCH'].toInteger() + 1
                def versionCode = versionProps['VERSION_CODE'].toInteger() + 1
                versionProps['VERSION_PATCH'] = versionPatch.toString()
                versionProps['VERSION_CODE'] = versionCode.toString()

                versionProps.store(versionPropsFile.newWriter(), null)
            }
        }
    }
}

allprojects {
    repositories {
        google()
        jcenter()
        maven { url "https://jitpack.io" }
    }
}

ext {
    //Versions
    versionMajor
    versionMinor
    versionPatch
    versionCode

    //Global config
    androidApplicationId = 'com.gmail.maystruks08.nfcruntracker'
    testApplicationId = 'com.gmail.maystruks08.nfcruntracker'
    androidVersionCode = versionCode
    androidVersionName = "${versionMajor}.${versionMinor}.${versionPatch}"
    testInstrumentationRunner = "android.support.test.runner.AndroidJUnitRunner"

    //Android
    androidBuildToolsVersion = "30.0.2"
    annotationVersion = '1.1.0'
    androidXToolsVersion = '1.3.2'
    androidXRecyclerViewVersion = '1.1.0'

    appCompatVersion = '1.2.0'
    legacySupportVersion = '1.0.0'

    androidXAppCompatToolsVersion = "1.1.0"
    androidMinSdkVersion = 21
    androidTargetSdkVersion = 30
    androidCompileSdkVersion = 30
    androidCoreKTXVersion = '1.3.2'

    //{ Libraries }

    //Android

    cardViewVersion = '1.0.0'
    //https://mvnrepository.com/artifact/com.android.support.constraint/constraint-layout
    constraintVersion = '2.1.0-alpha2'
    //https://mvnrepository.com/artifact/com.google.android.material/material
    designVersion = '1.3.0-beta01'

    //Kotlin
    //https://github.com/Kotlin/anko
    //https://developer.android.com/kotlin/ktx
    ankoVersion = '0.10.8'
    ktxVersion = '1.0.1'

    lifecycleCommonVersion = '2.3.0-rc01'
    lifecycleVersion = '2.2.0'
    livedataVersion = '2.2.0'

    //https://mvnrepository.com/artifact/org.jetbrains.kotlinx/kotlinx-coroutines-core
    coroutinesVersion = '1.3.7'

    //Dependency Injection
    //https://github.com/google/dagger
    daggerVersion = '2.30.1-alpha'
    daggerHiltCompilerVersion = '1.0.0-alpha02'

    daggerWorkVersion = '1.0.0-alpha02'
    daggerViewModelVersion = '1.0.0-alpha02'
    daggerVersion = '2.30.1-alpha'

    javaxAnnotationVersion = '1.0'
    javaxInjectVersion = '1'

    //WorkManager
    //https://developer.android.com/jetpack/androidx/releases/work#declaring_dependencies
    workManagerVersion = '2.4.0'

    //https://developer.android.com/jetpack/androidx/releases/room
    roomVersion = '2.2.6'

    //pdf
    textPDFVersion = '5.5.10'

    //LeakCanary version
    leakCanaryVersion = '2.4'

    //navigation version
    ciceroneVersion = '4.0.2'

    //fireStore version
    firestoreVersion = '22.0.1'
    firebaseUiVersion = '4.3.1'
    firebaseAuthVersion = '20.0.1'
    playServicesAuthVersion = '19.0.0'

    //xls parcer
    xlsParcerVersion = '3.17'

    //https://github.com/ShawnLin013/NumberPicker
    numberPickerVersion = '2.4.8'

    //Timber for logs
    timberVersion = '4.7.1'

    //Testing
    jUnitVersion = '4.13.1'
    mockitoKotlinVersion = '2.2.0'
    espressoVersion = '3.3.0'
    testingSupportLibVersion = '1.3.0'

    fragmentXVersion = "1.2.5"

    qrCodeScannerVersion = '2.1.0'

    presentationDependencies = [
            kotlinKtx                : "androidx.core:core-ktx:${androidCoreKTXVersion}",
            kotlin                   : "org.jetbrains.kotlin:kotlin-stdlib-jdk8:${kotlin_version}",

            supportAndroid           : "androidx.legacy:legacy-support-v4:${legacySupportVersion}",
            supportAppCompat         : "androidx.appcompat:appcompat:${appCompatVersion}",
            supportDesign            : "com.google.android.material:material:${designVersion}",

            recyclerView             : "androidx.recyclerview:recyclerview:${androidXRecyclerViewVersion}",
            annotations              : "androidx.annotation:annotation:${androidXToolsVersion}",

            constraintLayout         : "androidx.constraintlayout:constraintlayout:${constraintVersion}",
            cardView                 : "androidx.cardview:cardview:${cardViewVersion}",

            javaxAnnotation          : "javax.annotation:jsr250-api:${javaxAnnotationVersion}",
            javaxInject              : "javax.inject:javax.inject:${javaxInjectVersion}",

            daggerHiltAndroid        : "com.google.dagger:hilt-android:${daggerVersion}",
            daggerHiltAndroidCompiler: "com.google.dagger:hilt-android-compiler:${daggerVersion}",
            daggerHiltCompiler       : "androidx.hilt:hilt-compiler:${daggerHiltCompilerVersion}",
            daggerHiltLifecycle      : "androidx.hilt:hilt-lifecycle-viewmodel:${daggerViewModelVersion}",
            daggerHiltWorker         : "androidx.hilt:hilt-work:${daggerWorkVersion}",

            fragmentX                : "androidx.fragment:fragment-ktx:${fragmentXVersion}",

            cicerone                 : "ru.terrakok.cicerone:cicerone:${ciceroneVersion}",

            leakcanary               : "com.squareup.leakcanary:leakcanary-android:${leakCanaryVersion}",

            lifecycleExtensions      : "androidx.lifecycle:lifecycle-extensions:$lifecycleVersion",
            lifecycleLivedata        : "androidx.lifecycle:lifecycle-livedata-ktx:$livedataVersion",
            lifecycleViewmodel       : "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycleVersion",
            lifecycleCommon          : "androidx.lifecycle:lifecycle-common-java8:${lifecycleCommonVersion}",

            numberPicker             : "com.shawnlin:number-picker:${numberPickerVersion}",

            timber                   : "com.jakewharton.timber:timber:${timberVersion}",

            qrCodeScanner            : "com.budiyev.android:code-scanner:${qrCodeScannerVersion}"
    ]

    presentationTestDependencies = [
            junit            : "junit:junit:${jUnitVersion}",
            mockito          : "com.nhaarman.mockitokotlin2:mockito-kotlin:${mockitoKotlinVersion}",
            espresso         : "androidx.test.espresso:espresso-core:${espressoVersion}",
            testingSupportLib: "androidx.test:runner:${testingSupportLibVersion}",
    ]

    domainDependencies = [
            javaxAnnotation : "javax.annotation:jsr250-api:${javaxAnnotationVersion}",
            javaxInject     : "javax.inject:javax.inject:${javaxInjectVersion}",
            corutinesCore   : "org.jetbrains.kotlinx:kotlinx-coroutines-core:${coroutinesVersion}",
            corutinesAndroid: "org.jetbrains.kotlinx:kotlinx-coroutines-android:${coroutinesVersion}",
            kotlin          : "org.jetbrains.kotlin:kotlin-stdlib-jdk7:${kotlin_version}"
    ]

    domainTestDependencies = [
            junit  : "junit:junit:${jUnitVersion}",
            mockito: "com.nhaarman.mockitokotlin2:mockito-kotlin:${mockitoKotlinVersion}"
    ]

    dataDependencies = [
            annotations       : "androidx.annotation:annotation:${annotationVersion}",
            javaxAnnotation   : "javax.annotation:jsr250-api:${javaxAnnotationVersion}",
            javaxInject       : "javax.inject:javax.inject:${javaxInjectVersion}",
            kotlin            : "org.jetbrains.kotlin:kotlin-stdlib-jdk7:${kotlin_version}",
            room              : "androidx.room:room-ktx:${roomVersion}",
            roomCompiler      : "androidx.room:room-compiler:${roomVersion}",
            workManager       : "androidx.work:work-runtime-ktx:${workManagerVersion}",
            corutinesCore     : "org.jetbrains.kotlinx:kotlinx-coroutines-core:${coroutinesVersion}",
            corutinesAndroid  : "org.jetbrains.kotlinx:kotlinx-coroutines-android:${coroutinesVersion}",
            firebaseAuth      : "com.google.firebase:firebase-auth:${firebaseAuthVersion}",
            firestore         : "com.google.firebase:firebase-firestore:${firestoreVersion}",
            playServicesAuth  : "com.google.android.gms:play-services-auth:${playServicesAuthVersion}",
            timber            : "com.jakewharton.timber:timber:${timberVersion}",
            xlsParcerApache   : "org.apache.poi:poi:${xlsParcerVersion}",
            xlsParcerApacheXML: "org.apache.poi:poi-ooxml:${xlsParcerVersion}",
            itextpdf          : "com.itextpdf:itextg:${textPDFVersion}",
    ]

    dataTestDependencies = [
            junit  : "junit:junit:${jUnitVersion}",
            mockito: "com.nhaarman.mockitokotlin2:mockito-kotlin:${mockitoKotlinVersion}"
    ]
}
